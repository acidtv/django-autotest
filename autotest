#!/usr/bin/env python3

# Django auto test runner
#
# Watches for changed python files and then automatically
# runs the tests for the app the file is in.
# If the changed file is a test, only those tests will run.
# Run it in the root of your Django repo.
#
# Usage:
# $ autotest
#
# Requirements:
# - watchfiles

import argparse
import ast
import asyncio
import os
import re
import subprocess
import sys
from collections import defaultdict
from pathlib import Path

import watchfiles

CURRENT_DIR = Path(os.getcwd())


class TestCase(str): ...


class TestPattern(str): ...


class TestCaseNotFoundException(Exception): ...


Diff = dict[int, str]
FileDiffs = dict[Path, Diff]
TestCaseMap = dict[TestCase, range]


class TestVisitor(ast.NodeVisitor):
    def __init__(self, module_name: str) -> None:
        super().__init__()
        self.parent_testclass = None
        self.module_name = module_name
        self.function_map: TestCaseMap = {}

    def visit_ClassDef(self, node: ast.ClassDef):
        self.parent_testclass = node.name if node.name.endswith("TestCase") else None
        ret = self.generic_visit(node)
        self.parent_testclass = None
        return ret

    def visit_FunctionDef(self, node: ast.FunctionDef):
        if self.parent_testclass and node.name.startswith("test_"):
            parts = [
                part
                for part in [self.module_name, self.parent_testclass, node.name]
                if part
            ]
            self.function_map[TestCase(".".join(parts))] = range(
                node.lineno, node.end_lineno
            )


def get_diffs() -> FileDiffs:
    current_dir = Path(os.getcwd())
    result = subprocess.run(
        ["git", "diff", "--unified=0", "--color=never"],
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
    )
    file_diffs: FileDiffs = defaultdict(dict)
    file: Path | None = None
    lineno: int | None = None
    for line in result.stdout.splitlines():
        line = line.decode()
        if line.startswith("+++") or line.startswith("---"):
            match = re.match(r"\+\+\+ b/(.*)", line)
            if match:
                file = current_dir / match[1]
            else:
                # Reset file if it was deleted (+++ /dev/null)
                file = None
        elif line.startswith("@@") and file:
            match = re.match(r"@@ -\d+(,\d+)* \+(\d+)(,\d+)* @@.*", line)
            if not match:
                raise Exception("Could not parse diff line indicator")
            lineno = int(match[2])
        elif (line.startswith("+") or line.startswith("-")) and file and lineno:
            # TODO: do not count '-' lines as line numbers?
            file_diffs[file][lineno] = line
            lineno += 1
    return dict(file_diffs)


def compare_file_diffs(old: Diff, new: Diff) -> list[int]:
    """Compare diffs and returned changed lines between them."""
    changed: list[int] = []
    for lineno, line in new.items():
        if lineno not in old:
            changed.append(lineno)
        elif line != old[lineno]:
            changed.append(lineno)
    return changed


def create_function_map_from_file(file: Path) -> TestCaseMap:
    visitor = TestVisitor(module_name=path_to_module(file))
    nodes = ast.parse(file.read_text())
    visitor.visit(nodes)
    return visitor.function_map


def get_changed_functions(file: Path) -> set[TestCase]:
    # TODO: save previous diffs
    previous_diff = {}
    current_diffs = get_diffs()
    if file not in current_diffs:
        return set()
    current_diff = current_diffs[file]
    changed_lines = compare_file_diffs(previous_diff, current_diff)
    changed_functions = set()
    function_map = create_function_map_from_file(file)
    for lineno in changed_lines:
        for function, linerange in function_map.items():
            if lineno in linerange:
                changed_functions.add(function)
    return changed_functions


def path_to_module(path: Path) -> str:
    relative_path = path.relative_to(CURRENT_DIR).with_suffix("")
    module = str(relative_path).replace("/", ".")
    return module


def module_to_testcase(module: str) -> TestCase:
    # Return complete module string if this is a test
    file = module.rsplit(".", maxsplit=1)[-1]
    if file.startswith("test_"):
        return TestCase(module)

    # Otherwise return the app the file is in
    app = ".".join(module.split(".")[0:2])
    return TestCase(app)


FailedTests = list[tuple[str, TestCase]]


async def run_test(
    testcases: list[TestCase] | None = None, patterns: list[TestPattern] | None = None
) -> FailedTests:
    if testcases:
        cmd = f"./manage.py test {' '.join(testcases)}"
        if len(testcases) != 1:
            info = f"{len(testcases)} testcases"
        else:
            info = testcases[0]
    elif patterns:
        command_patterns = [f" -k {pattern}" for pattern in patterns]
        cmd = f"./manage.py test {' '.join(command_patterns)}"
        info = f"patterns: {', '.join(patterns)}"
    else:
        raise Exception("Either `testcase` or `patterns` is required")

    print("")
    print("########################################################")
    print("Testing", info)
    print("########################################################")

    # Set stdout and stderr to None so output is redirected
    # to the parent process' stdout and stderr.
    # proc = await asyncio.create_subprocess_shell(cmd, stdout=None, stderr=None)
    proc = await asyncio.create_subprocess_shell(
        cmd, stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE
    )

    async def stdout_reader(stdout):
        while True:
            output = await stdout.read(10)
            print(output.decode(), end="")
            if not output:
                break

    async def stderr_reader(stderr) -> tuple[FailedTests, list[str]]:
        fail_regex = r"^(?P<mode>(ERROR|FAIL)): (?P<name>.+) \((?P<test>.+)\).*$"
        failed: FailedTests = []
        disappeared: list[str] = []
        while True:
            output = await stderr.readline()
            output = output.decode()
            match = re.match(fail_regex, output)

            if match:
                if "unittest.loader._FailedTest" in output:
                    disappeared.append(match.group("name"))
                else:
                    failed.append((match.group("mode"), TestCase(match.group("test"))))

            print(output, end="")
            if not output:
                break
        return failed, disappeared

    _, (failed_tests, disappeared_tests) = await asyncio.gather(
        stdout_reader(proc.stdout), stderr_reader(proc.stderr)
    )
    exit_code = await proc.wait()

    print("")
    if failed_tests or disappeared_tests or exit_code != 0:
        print(f"# ðŸ”´ {len(failed_tests)} Tests failed!")
        for mode, failed_test in failed_tests:
            print(f"# - {mode}: {failed_test}")
        for disappeared_test in disappeared_tests:
            print(f"# - DISAPPEARED: {disappeared_test}")
    else:
        print("# âœ… Tests passed.")

    return failed_tests


async def testrunner(queue: asyncio.Queue):
    """Worker that watches the queue for tests to run"""
    failed_tests = []

    def test_labels(failed_tests: FailedTests) -> list[TestCase]:
        return [label for mode, label in failed_tests]

    while True:
        match testcases := await queue.get():
            case list():
                if failed_tests:
                    testcases = test_labels(failed_tests)
                failed_tests = await run_test(testcases=testcases)
            case TestPattern():
                failed_tests = await run_test(patterns=[testcases])
            case _:
                raise Exception("Unknown testcase type")

        print(f"# {queue.qsize()} testcase(s) in queue.")


async def main(pattern: str | None = None, detect_changed_testcases: bool = True):
    queue = asyncio.Queue()
    task = asyncio.create_task(testrunner(queue))

    print("Watching for changes to python files...")
    if pattern:
        print(f"Pattern: {pattern}")
    print("")

    try:
        async for changes in watchfiles.awatch("."):
            testcases: set[TestCase] = set()
            for change, file in changes:
                if pattern or (not file.endswith(".py")):
                    continue

                file_path = Path(file)
                changed_testcases = None
                if detect_changed_testcases and file_path.stem.startswith("test"):
                    try:
                        changed_testcases = get_changed_functions(file_path)
                    except Exception as e:
                        print(
                            f"# Could not detect changed testcases in {file}: {e}",
                            file=sys.stderr,
                        )

                # Fall back to testing module if not changed testcases were found
                if not changed_testcases:
                    module = path_to_module(file_path)
                    testcase = module_to_testcase(module)
                    if testcase:
                        testcases.add(testcase)
                else:
                    testcases |= changed_testcases

            # If pattern is defined always run tests matching the pattern
            if pattern:
                queue.put_nowait(TestPattern(pattern))
            else:
                new_testcases = [case for case in testcases if case not in queue._queue]
                queue.put_nowait(new_testcases)
    finally:
        task.cancel()


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        prog="autotest", description="Automatically run Django tests when files change."
    )
    parser.add_argument(
        "-k",
        type=str,
        dest="pattern",
        help="Only run test methods and classes that match the pattern. Passed to Django.",
    )
    args = parser.parse_args()

    try:
        asyncio.run(main(pattern=args.pattern))
    except KeyboardInterrupt:
        print("")
        print("Stopped!")
